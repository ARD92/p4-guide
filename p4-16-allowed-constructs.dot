digraph p4_16_allowed_construct_nesting {

    node [shape=box];
    rankdir=LR;
    
    toplevel [label="top level"];
    legend_bold_orange_box [label="Things inside dashed lines\nare either only allowed in,\nor most useful within,\narchitecture model files." style=dashed color=orange];

    toplevel -> typeDeclaration;
    typeDeclaration [label="type declarations for\nparser, control, package" style=dashed color=orange];
    toplevel -> externDeclaration;
    externDeclaration [label="extern function and\n object declarations" style=dashed color=orange];
    toplevel -> parserDeclaration;
    parserDeclaration [label="parser"];
    toplevel -> constantDeclaration1;
    constantDeclaration1 [label="const"];
    toplevel -> typedefDeclaration;
    typedefDeclaration [label="typedef"];
    toplevel -> headerTypeDeclaration;
    headerTypeDeclaration [label="header"];
    toplevel -> structTypeDeclaration;
    structTypeDeclaration [label="struct"];
    toplevel -> enumDeclaration;
    enumDeclaration [label="enum"];
    toplevel -> errorDeclaration;
    errorDeclaration [label="error"];
    toplevel -> matchKindDeclaration;
    matchKindDeclaration [label="match_kind"];
    toplevel -> controlInstantiation;
    controlInstantiation [label="instantiation of control"];
    toplevel -> externObjectInstantiation;
    externObjectInstantiation [label="instantiation of extern object"];
    toplevel -> actionDeclaration;
    actionDeclaration [label="action"];
    toplevel -> controlDeclaration;
    controlDeclaration [label="control"];

    // this is 'parser <name> (<parameters>) { ... }'
    parserDeclaration -> constantDeclaration2;
    constantDeclaration2 [label="const"];
    parserDeclaration -> variableDeclaration2;
    variableDeclaration2 [label="variable decl"];
    parserDeclaration -> externObjectInstantiation2;
    externObjectInstantiation2 [label="instantiation of extern object"];
    parserDeclaration -> parserState;

    parserState [label="state"];
    parserState -> constantDeclaration3;
    constantDeclaration3 [label="const"];
    parserState -> variableDeclaration3;
    variableDeclaration3 [label="variable decl"];
    parserState -> assignmentStatement3;
    assignmentStatement3 [label="assignment"];
    parserState -> actionCallStatement3 [color=red label="TBD: Allowed?\np4c issue #413\np4-spec issue #151" decorate=True];
    actionCallStatement3 [label="action call"];
    parserState -> externObjectMethodCallStatement3;
    externObjectMethodCallStatement3 [label="extern object method call"];
    parserState -> blockStatement3;
    blockStatement3 [label="block statement\n{ ... }"];
    blockStatement3 -> blockStatementInParserState;
    blockStatementInParserState [label="anything allowed\ndirectly inside state\nexcept transition,\nwhich must be last"];
    parserState -> transitionStatement;
    transitionStatement [label="transition <statename>;\ntransition select ..."];

    controlDeclaration -> constantDeclaration4;
    constantDeclaration4 [label="const"];
    controlDeclaration -> variableDeclaration4;
    variableDeclaration4 [label="variable decl"];
    controlDeclaration -> controlInstantiation4;
    controlInstantiation4 [label="instantiation of control"];
    controlDeclaration -> externObjectInstantiation4;
    externObjectInstantiation4 [label="instantiation of extern object"];
    controlDeclaration -> actionDeclaration;
    controlDeclaration -> tableDeclaration;
    controlDeclaration -> controlBody;
    controlBody [label="control body\napply { }"];

    tableDeclaration [label="table"];
    tableDeclaration -> tablePropertyKey;
    tablePropertyKey [label="key = { ... }"];
    tableDeclaration -> tablePropertyActions;
    tablePropertyActions [label="actions = { ... }"];
    tableDeclaration -> tablePropertyDefaultAction;
    tablePropertyDefaultAction [label="default_action = <action_name>;"];

    actionDeclaration -> constantDeclaration5;
    constantDeclaration5 [label="const"];
    actionDeclaration -> variableDeclaration5;
    variableDeclaration5 [label="variable decl"];
    actionDeclaration -> assignmentStatement5;
    assignmentStatement5 [label="assignment"];
    actionDeclaration -> actionCallStatement5;
    actionCallStatement5 [label="action call"];
    actionDeclaration -> externObjectMethodCallStatement5;
    externObjectMethodCallStatement5 [label="extern object method call"];
    actionDeclaration -> returnStatement5;
    returnStatement5 [label="return"];
    actionDeclaration -> exitStatement5;
    exitStatement5 [label="exit"];
    actionDeclaration -> conditionalStatement5;
    conditionalStatement5 [label="if"];
    conditionalStatement5 -> blockStatementInActionDeclaration;
    actionDeclaration -> blockStatement5;
    blockStatement5 [label="block statement\n{ ... }"];
    blockStatement5 -> blockStatementInActionDeclaration;
    blockStatementInActionDeclaration [label="anything allowed\ndirectly inside action"];

    // I am making up actionCallStatement.  It might most closely
    // correspond in P4_16 grammar to assignmentOrMethodCallStatement.
    //actionCallStatement

    controlBody -> constantDeclaration6;
    constantDeclaration6 [label="const"];
    controlBody -> variableDeclaration6;
    variableDeclaration6 [label="variable decl"];
    controlBody -> assignmentStatement6;
    assignmentStatement6 [label="assignment"];
    controlBody -> actionCallStatement6;
    actionCallStatement6 [label="action call"];
    controlBody -> externObjectMethodCallStatement6;
    externObjectMethodCallStatement6 [label="extern object method call"];
    controlBody -> tableApplyCall6;
    tableApplyCall6 [label="<table>.apply()"];
    controlBody -> controlCallStatement6;
    controlCallStatement6 [label="<control_name>.apply()"];
    controlBody -> switchStatement6;
    switchStatement6 [label="switch (<table>.apply().action_run) { ... }"];
    controlBody -> returnStatement6;
    returnStatement6 [label="return"];
    controlBody -> exitStatement6;
    exitStatement6 [label="exit"];
    controlBody -> conditionalStatement6;
    conditionalStatement6 [label="if"];
    conditionalStatement6 -> blockStatementInControlBody;
    controlBody -> blockStatement6;
    blockStatement6 [label="block statement\n{ ... }"];
    blockStatement6 -> blockStatementInControlBody;
    blockStatementInControlBody [label="anything allowed\ndirectly inside control body"];

//    blockStatement [label="block statement\n{ ... }"];
//    blockStatement -> constantDeclaration7;
//    constantDeclaration7 [label="const"];
//    blockStatement -> variableDeclaration7;
//    variableDeclaration7 [label="variable decl"];
//    blockStatement -> actionCallStatement7;
//    actionCallStatement7 [label="action call"];
//    blockStatement -> assignmentStatement7;
//    assignmentStatement7 [label="assignment"];
//    blockStatement -> blockStatement;
//    blockStatement -> conditionalStatement7 [label="unless block is\ninside state" decorate=True];
//    conditionalStatement7 [label="if"];
//    conditionalStatement7 -> conditionalStatement7;
//    blockStatement -> returnStatement7 [label="unless block is\ninside state" decorate=True];
//    returnStatement7 [label="return"];
//    blockStatement -> exitStatement7 [label="unless block is\ninside state" decorate=True];
//    exitStatement7 [label="exit"];
//    blockStatement -> tableApplyCall7 [label="only in\ncontrol body\n'apply'" decorate=True];
//    tableApplyCall7 [label="<table>.apply()"];
//    blockStatement -> switchStatement7 [label="only in\ncontrol body\n'apply'" decorate=True];
//    switchStatement7 [label="switch (<table>.apply().action_run) { ... }"];

//    conditionalStatement [label="if"];
//    conditionalStatement -> conditionalStatement;
}
